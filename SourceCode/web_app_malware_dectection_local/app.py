"""
    Streamlit webserver application for malware detection.

    Author: Explore Data Science Academy.

    Description: This file is used to launch a Streamlit web application
    that allows users to upload a PE file and detect malware using 5 different
    machine learning models.

    For further help with the Streamlit framework, see:
    https://docs.streamlit.io/en/latest/
"""

import streamlit as st

import re
import json
import joblib
import xgboost
import numpy as np

import chainer as ch
import chainer.links as L
import chainer.functions as F

from gensim.models import Doc2Vec, LsiModel

save_path = ''
MAX_FILESIZE = 16*1024*1024
MAX_STRINGCNT = 2048
MAX_STRINGLEN = 1024

def Strings(file_path):
    data = open(file_path, "rb").read(MAX_FILESIZE)
    strings = []
    for s in re.findall(b"[\x1f-\x7e]{6,}", data):
        strings.append(s.decode("utf-8"))
    for s in re.findall(b"(?:[\x1f-\x7e][\x00]){6,}", data):
        strings.append(s.decode("utf-16le"))

    strings = strings[:MAX_STRINGCNT]
    for idx, s in enumerate(strings):
        strings[idx] = s[:MAX_STRINGLEN]

    return strings

def String2word(string_list):
    return ' '.join(string_list).lower().split()

def Reduce_words(words, frequent_words):
    return [[word for word in file_words if word in frequent_words] for file_words in words]

def Convert_to_vectors(words, language_model):
    vectors = []
    for word_list in words:
        if isinstance(language_model, Doc2Vec):
            vector = language_model.infer_vector(word_list)
        else:
            bow = language_model.id2word.doc2bow(word_list)
            vector = [value for _, value in language_model[bow]]
        vectors.append(vector)
    return vectors

def load_language_model(filename):
    return Doc2Vec.load(filename) if filename.endswith("Doc2Vec") else LsiModel.load(filename + '.lsi')

def MLP(n_units, n_out):
    layer = ch.Sequential(L.Linear(n_units), F.relu)
    model = layer.repeat(2)
    model.append(L.Linear(n_out))
    return model

class CNN(ch.Chain):
    def __init__(self, n_out):
        super(CNN, self).__init__()
        with self.init_scope():
            self.conv1 = L.Convolution1D(None, 32, ksize=3, stride=1, pad=1)
            self.conv2 = L.Convolution1D(32, 64, ksize=3, stride=1, pad=1)
            self.fc1 = L.Linear(None, 512)
            self.fc2 = L.Linear(512, n_out)

    def forward(self, x):
        h = F.relu(self.conv1(x))
        h = F.max_pooling_1d(h, 2, 2)
        h = F.relu(self.conv2(h))
        h = F.max_pooling_1d(h, 2, 2)
        h = F.relu(self.fc1(h))
        h = self.fc2(h)
        return h

st.title("Malware Detection")
st.subheader("Detect Malware in PE Files")

model_type = ["LSI", "Doc2Vec"]
LANGUAGE_MODEL = st.sidebar.selectbox("Choose Option", model_type)

with open(save_path+LANGUAGE_MODEL+'_benign_frequent_words.json', 'r') as file:
    benign_frequent_words = json.load(file)

with open(save_path+LANGUAGE_MODEL+'_malware_frequent_words.json', 'r') as file:
    malware_frequent_words = json.load(file)

language_model = load_language_model(save_path+LANGUAGE_MODEL)
svm_model = joblib.load(save_path+f"_{LANGUAGE_MODEL}-SVM.pkl")
rf_model = joblib.load(save_path+f"_{LANGUAGE_MODEL}-RF.pkl")
xgb_model = joblib.load(save_path+f"_{LANGUAGE_MODEL}-XGB.pkl")

mlp_model = L.Classifier(MLP(40, 1), lossfun=F.sigmoid_cross_entropy, accfun=F.binary_accuracy)
ch.serializers.load_npz(save_path+f"_{LANGUAGE_MODEL}_mlp_model.npz", mlp_model)

cnn_model = L.Classifier(CNN(1), lossfun=F.sigmoid_cross_entropy, accfun=F.binary_accuracy)
ch.serializers.load_npz(save_path+f"_{LANGUAGE_MODEL}_cnn_model.npz", cnn_model)

uploaded_file = st.file_uploader("Choose a PE file", type=["exe", "dll"])

if uploaded_file is not None:
    with open("uploaded_file.exe", "wb") as f:
        f.write(uploaded_file.getbuffer())

    unknown_words = [String2word(Strings('uploaded_file.exe'))]
    reduced_unknown_words = Reduce_words(unknown_words, benign_frequent_words + malware_frequent_words)
    unknown_vectors = Convert_to_vectors(reduced_unknown_words, language_model)
    unknown_vectors = np.array(unknown_vectors, dtype=np.float32)

    svm_predictions = svm_model.predict(unknown_vectors)
    rf_predictions = rf_model.predict(unknown_vectors)
    xgb_predictions = xgb_model.predict(unknown_vectors)
    mlp_predictions = np.where(mlp_model.predictor(unknown_vectors).array < 0, 0, 1)
    cnn_predictions = np.where(cnn_model.predictor(unknown_vectors.reshape(-1, 1, unknown_vectors.shape[1])).array < 0, 0, 1)

    all_predictions = {
        'SVM': svm_predictions.flatten(),
        'RF': rf_predictions.flatten(),
        'XGBoost': xgb_predictions.flatten(),
        'MLP': mlp_predictions.flatten(),
        'CNN': cnn_predictions.flatten()
    }

    st.info("Malware Detection Results:")

    # Create a layout with columns for better visualization
    cols = st.columns(len(all_predictions))

    # Iterate through predictions and display them in separate columns
    for idx, (model, prediction) in enumerate(all_predictions.items()):
        with cols[idx]:
            st.subheader(model)
            if prediction[0] == 1:
                st.error("Malware Detected")
            else:
                st.success("No Malware Detected")

else:
    st.info("Please upload a PE file to detect malware.")
